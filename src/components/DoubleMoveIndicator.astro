---
let {move} = Astro.props;
---

<div class="double-move-indicator" data-move={move}>2</div>


<style>
.double-move-indicator {
	/* TODO?: accept cubie size as props? */
	--a: calc(1px * var(--cubie-size-px));
	position: absolute;
	transform-origin: 50% 50%;
	translate: -50% -50%;
	width: var(--a);
	height: var(--a);
	display: flex;
	justify-content: center;
	align-items: center;
	/* background-color: blue; */
	/* TODO?: accept these angles as props? */
	--reverse-rotation: rotateZ(calc(-1*var(--rotate-z))) rotateX(calc(-1*var(--rotate-x))) rotateY(calc(-1*var(--rotate-y)));

	font-size: calc(1.2*var(--a));
	font-weight: bold;
	font-family: sans-serif;
	color: red;
}

[data-move^=R] {transform: translateX(calc(  1.8*var(--a))) var(--reverse-rotation) }
[data-move^=U] {transform: translateY(calc(-1.85*var(--a))) var(--reverse-rotation) }
[data-move^=F] {transform: translateZ(calc(  1.8*var(--a))) var(--reverse-rotation) }
[data-move^=L] {transform: translate3d(calc(  -1*var(--a)), calc(-1.7*var(--a)), calc(1.8*var(--a))) var(--reverse-rotation) }
[data-move^=D] {transform: translate3d(calc( 1.8*var(--a)), calc( 1.1*var(--a)), calc(  1*var(--a))) var(--reverse-rotation) }
[data-move^=B] {transform: translate3d(calc(1.75*var(--a)), calc(-1.5*var(--a)), calc(-.9*var(--a))) var(--reverse-rotation) }

</style>
